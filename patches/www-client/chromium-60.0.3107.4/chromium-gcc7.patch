--- a/third_party/WebKit/Source/platform/graphics/gpu/SharedGpuContext.h  2017-05-15 17:44:50.728855047 -0400
+++ b/third_party/WebKit/Source/platform/graphics/gpu/SharedGpuContext.h  2017-05-15 17:38:49.517846462 -0400
@@ -5,6 +5,7 @@
 #include "platform/PlatformExport.h"
 #include "platform/wtf/ThreadSpecific.h"

+#include <functional>
 #include <memory>

 namespace gpu {

diff --git a/third_party/WebKit/Source/platform/wtf/LinkedHashSet.h b/third_party/WebKit/Source/platform/wtf/LinkedHashSet.h
index e85c72f..6f94cd6 100644
--- a/third_party/WebKit/Source/platform/wtf/LinkedHashSet.h
+++ b/third_party/WebKit/Source/platform/wtf/LinkedHashSet.h
@@ -685,6 +685,8 @@
   return *this;
 }

+inline void SwapAnchor(LinkedHashSetNodeBase& a, LinkedHashSetNodeBase& b);
+
 template <typename T, typename U, typename V, typename W>
 inline void LinkedHashSet<T, U, V, W>::Swap(LinkedHashSet& other) {
   impl_.Swap(other.impl_);
diff --git a/v8/src/objects-body-descriptors.h b/v8/src/objects-body-descriptors.h
index 91cb888..a1c3634 100644
--- a/v8/src/objects-body-descriptors.h
+++ b/v8/src/objects-body-descriptors.h
@@ -99,7 +99,7 @@ class FixedBodyDescriptor final : public BodyDescriptorBase {

   template <typename StaticVisitor>
   static inline void IterateBody(HeapObject* obj, int object_size) {
-    IterateBody(obj);
+    IterateBody<StaticVisitor>(obj);
   }
 };

diff --git a/v8/src/objects-inl.h b/v8/src/objects-inl.h
index 58441d3..4c486ea 100644
--- a/v8/src/objects-inl.h
+++ b/v8/src/objects-inl.h
@@ -7588,6 +7588,24 @@ bool GlobalDictionaryShape::IsDeleted(Dictionary* dict, int entry) {
 }


+template <typename Derived, typename Shape, typename Key>
+inline uint32_t HashTable<Derived,Shape,Key>::Hash(Key key) {
+  if (Shape::UsesSeed) {
+    return Shape::SeededHash(key, GetHeap()->HashSeed());
+  } else {
+    return Shape::Hash(key);
+  }
+}
+
+template <typename Derived, typename Shape, typename Key>
+inline uint32_t HashTable<Derived,Shape,Key>::HashForObject(Key key, Object* object) {
+  if (Shape::UsesSeed) {
+    return Shape::SeededHashForObject(key, GetHeap()->HashSeed(), object);
+  } else {
+    return Shape::HashForObject(key, object);
+  }
+}
+
 bool ObjectHashTableShape::IsMatch(Handle<Object> key, Object* other) {
   return key->SameValue(other);
 }
diff --git a/v8/src/objects/hash-table.h b/v8/src/objects/hash-table.h
index 7d774be..42da5fa 100644
--- a/v8/src/objects/hash-table.h
+++ b/v8/src/objects/hash-table.h
@@ -3194,21 +3194,9 @@ class HashTable : public HashTableBase {
   typedef Shape ShapeT;

   // Wrapper methods
-  inline uint32_t Hash(Key key) {
-    if (Shape::UsesSeed) {
-      return Shape::SeededHash(key, GetHeap()->HashSeed());
-    } else {
-      return Shape::Hash(key);
-    }
-  }
+  inline uint32_t Hash(Key key);

-  inline uint32_t HashForObject(Key key, Object* object) {
-    if (Shape::UsesSeed) {
-      return Shape::SeededHashForObject(key, GetHeap()->HashSeed(), object);
-    } else {
-      return Shape::HashForObject(key, object);
-    }
-  }
+  inline uint32_t HashForObject(Key key, Object* object);

   // Returns a new HashTable object.
   MUST_USE_RESULT static Handle<Derived> New(
--
