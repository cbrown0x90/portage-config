diff '--color=auto' -aur a/config.mk b/config.mk
--- a/config.mk	2022-06-26 14:02:40.993075904 -0400
+++ b/config.mk	2022-06-26 14:19:54.911918589 -0400
@@ -10,9 +10,9 @@
 X11INC = /usr/X11R6/include
 X11LIB = /usr/X11R6/lib

-# Xinerama, comment if you don't want it
-XINERAMALIBS  = -lXinerama
-XINERAMAFLAGS = -DXINERAMA
+# Xrandr, comment if you don't want it
+XRANDRLIBS  = -lXrandr
+XRANDRFLAGS = -DXRANDR

 # freetype
 FREETYPELIBS = -lfontconfig -lXft
@@ -23,10 +23,10 @@

 # includes and libs
 INCS = -I${X11INC} -I${FREETYPEINC}
-LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS}
+LIBS = -L${X11LIB} -lX11 ${XRANDRLIBS} ${FREETYPELIBS}

 # flags
-CPPFLAGS = -D_DEFAULT_SOURCE -D_BSD_SOURCE -D_POSIX_C_SOURCE=200809L -DVERSION=\"${VERSION}\" ${XINERAMAFLAGS}
+CPPFLAGS = -D_DEFAULT_SOURCE -D_BSD_SOURCE -D_POSIX_C_SOURCE=200809L -DVERSION=\"${VERSION}\" ${XRANDRFLAGS}
 #CFLAGS   = -g -std=c99 -pedantic -Wall -O0 ${INCS} ${CPPFLAGS}
 CFLAGS   = -std=c99 -pedantic -Wall -Wno-deprecated-declarations -Os ${INCS} ${CPPFLAGS}
 LDFLAGS  = ${LIBS}
diff '--color=auto' -aur a/dwm.c b/dwm.c
--- a/dwm.c	2022-06-26 14:03:33.793700939 -0400
+++ b/dwm.c	2022-06-26 14:17:18.393425365 -0400
@@ -36,9 +36,9 @@
 #include <X11/Xlib.h>
 #include <X11/Xproto.h>
 #include <X11/Xutil.h>
-#ifdef XINERAMA
-#include <X11/extensions/Xinerama.h>
-#endif /* XINERAMA */
+#ifdef XRANDR
+#include <X11/extensions/Xrandr.h>
+#endif /* XRANDR */
 #include <X11/Xft/Xft.h>

 #include "drw.h"
@@ -142,6 +142,13 @@
 	int monitor;
 } Rule;

+#ifdef XRANDR
+typedef struct {
+    int evbase;
+    int errbase;
+} Xrandr;
+#endif /* XRANDR */
+
 /* function declarations */
 static void applyrules(Client *c);
 static int applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact);
@@ -274,6 +281,9 @@
 static Drw *drw;
 static Monitor *mons, *selmon;
 static Window root, wmcheckwin;
+#ifdef XRANDR
+static Xrandr rr;
+#endif /* XRANDR */

 /* configuration, allows nested code to access above variables */
 #include "config.h"
@@ -592,18 +602,17 @@
 }

 void
-configurenotify(XEvent *e)
+handlechangenotify(Window* window, int width, int height)
 {
 	Monitor *m;
 	Client *c;
-	XConfigureEvent *ev = &e->xconfigure;
 	int dirty;

 	/* TODO: updategeom handling sucks, needs to be simplified */
-	if (ev->window == root) {
-		dirty = (sw != ev->width || sh != ev->height);
-		sw = ev->width;
-		sh = ev->height;
+	if (*window == root) {
+		dirty = (sw != width || sh != height);
+		sw = width;
+		sh = height;
 		if (updategeom() || dirty) {
 			drw_resize(drw, sw, bh);
 			updatebars();
@@ -620,6 +629,24 @@
 }

 void
+configurenotify(XEvent *e)
+{
+	XRRUpdateConfiguration(e);
+	XConfigureEvent *ev = &e->xconfigure;
+	handlechangenotify(&ev->window, ev->width, ev->height);
+}
+
+#ifdef XRANDR
+void
+rrscreenchangenotify(XEvent *e)
+{
+	XRRUpdateConfiguration(e);
+	XRRScreenChangeNotifyEvent *rre = (XRRScreenChangeNotifyEvent*)e;
+	handlechangenotify(&rre->window, rre->width, rre->height);
+}
+#endif /* XRANDR */
+
+void
 configurerequest(XEvent *e)
 {
 	Client *c;
@@ -1016,17 +1043,17 @@
 	arrange(selmon);
 }

-#ifdef XINERAMA
+#ifdef XRANDR
 static int
-isuniquegeom(XineramaScreenInfo *unique, size_t n, XineramaScreenInfo *info)
+isuniquegeom(XRRMonitorInfo *unique, size_t n, XRRMonitorInfo *info)
 {
 	while (n--)
-		if (unique[n].x_org == info->x_org && unique[n].y_org == info->y_org
+		if (unique[n].x == info->x && unique[n].y == info->y
 		&& unique[n].width == info->width && unique[n].height == info->height)
 			return 0;
 	return 1;
 }
-#endif /* XINERAMA */
+#endif /* XRANDR */

 void
 keypress(XEvent *e)
@@ -1445,8 +1472,14 @@
 	/* main event loop */
 	XSync(dpy, False);
 	while (running && !XNextEvent(dpy, &ev))
-		if (handler[ev.type])
+	{
+		if (ev.type < LASTEvent && handler[ev.type])
 			handler[ev.type](&ev); /* call handler */
+#ifdef XRANDR
+		if (ev.type == rr.evbase + RRScreenChangeNotify)
+			rrscreenchangenotify(&ev);
+#endif /* XRANDR */
+    }
 }

 void
@@ -1616,6 +1649,19 @@
 	lrpad = drw->fonts->h;
 	bh = drw->fonts->h + 2;
 	updategeom();
+
+#ifdef XRANDR
+	/* init Xrandr support */
+	if (XRRQueryExtension(dpy, &rr.evbase, &rr.errbase))
+	{
+		XRRSelectInput(dpy, root, RRScreenChangeNotifyMask);
+	}
+	else
+	{
+		die("Xrandr support is not working.");
+	}
+#endif /* XRANDR */
+
 	/* init atoms */
 	utf8string = XInternAtom(dpy, "UTF8_STRING", False);
 	wmatom[WMProtocols] = XInternAtom(dpy, "WM_PROTOCOLS", False);
@@ -1923,25 +1969,22 @@
 {
 	int dirty = 0;

-#ifdef XINERAMA
-	if (XineramaIsActive(dpy)) {
-		int i, j, n, nn;
-		Client *c;
-		Monitor *m;
-		XineramaScreenInfo *info = XineramaQueryScreens(dpy, &nn);
-		XineramaScreenInfo *unique = NULL;
-
-		for (n = 0, m = mons; m; m = m->next, n++);
-		/* only consider unique geometries as separate screens */
-		unique = ecalloc(nn, sizeof(XineramaScreenInfo));
-		for (i = 0, j = 0; i < nn; i++)
-			if (isuniquegeom(unique, j, &info[i]))
-				memcpy(&unique[j++], &info[i], sizeof(XineramaScreenInfo));
-		XFree(info);
-		nn = j;
+#ifdef XRANDR
+	int i, j, n, nn;
+	Client *c;
+	Monitor *m;
+	XRRMonitorInfo *info = XRRGetMonitors(dpy, root, 0, &nn);
+	XRRMonitorInfo *unique = NULL;

-		/* new monitors if nn > n */
-		for (i = n; i < nn; i++) {
+	for (n = 0, m = mons; m; m = m->next, n++);
+	/* only consider unique geometries as separate screens */
+	unique = ecalloc(nn, sizeof(XRRMonitorInfo));
+	for (i = 0, j = 0; i < nn; i++)
+		if (isuniquegeom(unique, j, &info[i]))
+			memcpy(&unique[j++], &info[i], sizeof(XRRMonitorInfo));
+	nn = j;
+	if (n <= nn) { /* new monitors available */
+		for (i = 0; i < (nn - n); i++) {
 			for (m = mons; m && m->next; m = m->next);
 			if (m)
 				m->next = createmon();
@@ -1950,18 +1993,30 @@
 		}
 		for (i = 0, m = mons; i < nn && m; m = m->next, i++)
 			if (i >= n
-			|| unique[i].x_org != m->mx || unique[i].y_org != m->my
+			|| unique[i].x != m->mx || unique[i].y != m->my
 			|| unique[i].width != m->mw || unique[i].height != m->mh)
 			{
 				dirty = 1;
 				m->num = i;
-				m->mx = m->wx = unique[i].x_org;
-				m->my = m->wy = unique[i].y_org;
+				m->mx = m->wx = unique[i].x;
+				m->my = m->wy = unique[i].y;
+				m->mw = m->ww = unique[i].width;
+				m->mh = m->wh = unique[i].height;
+				updatebarpos(m);
+			}
+	} else { /* less monitors available nn < n */
+		for (i = 0, m = mons; i < nn && m; m = m->next, i++)
+			if (unique[i].x != m->mx || unique[i].y != m->my
+			|| unique[i].width != m->mw || unique[i].height != m->mh)
+			{
+				dirty = 1;
+				m->num = i;
+				m->mx = m->wx = unique[i].x;
+				m->my = m->wy = unique[i].y;
 				m->mw = m->ww = unique[i].width;
 				m->mh = m->wh = unique[i].height;
 				updatebarpos(m);
 			}
-		/* removed monitors if n > nn */
 		for (i = nn; i < n; i++) {
 			for (m = mons; m && m->next; m = m->next);
 			while ((c = m->clients)) {
@@ -1976,19 +2031,21 @@
 				selmon = mons;
 			cleanupmon(m);
 		}
-		free(unique);
-	} else
-#endif /* XINERAMA */
-	{ /* default monitor setup */
-		if (!mons)
-			mons = createmon();
-		if (mons->mw != sw || mons->mh != sh) {
-			dirty = 1;
-			mons->mw = mons->ww = sw;
-			mons->mh = mons->wh = sh;
-			updatebarpos(mons);
-		}
 	}
+	XRRFreeMonitors(info);
+	free(unique);
+#else /* XRANDR */
+	/* default monitor setup */
+	if (!mons)
+		mons = createmon();
+	if (mons->mw != sw || mons->mh != sh) {
+		dirty = 1;
+		mons->mw = mons->ww = sw;
+		mons->mh = mons->wh = sh;
+		updatebarpos(mons);
+	}
+#endif
+
 	if (dirty) {
 		selmon = mons;
 		selmon = wintomon(root);
