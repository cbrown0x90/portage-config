--- a/config.def.h	2017-03-22 00:15:21.513468724 -0400
+++ b/config.def.h	2017-03-22 00:14:41.201467766 -0400
@@ -82,6 +82,9 @@
  */
 static unsigned int tabspaces = 8;

+/* bg opacity */
+const int alpha = 0xdd;
+
 /* Terminal colors (16 first used in escape sequence) */
 const char *colorname[] = {
 	/* 8 normal colors */
@@ -109,6 +112,7 @@
 	/* more colors can be added after 255 to use with DefaultXX */
 	"#cccccc",
 	"#555555",
+    "black",
 };


@@ -117,7 +121,7 @@
  * foreground, background, cursor, reverse cursor
  */
 unsigned int defaultfg = 7;
-unsigned int defaultbg = 0;
+unsigned int defaultbg = 257;
 unsigned int defaultcs = 256;
 unsigned int defaultrcs = 257;

--- a/config.mk   2017-07-16 11:32:11.658196308 -0400
+++ b/config.mk 2017-07-16 11:35:43.647201346 -0400
@@ -14,7 +14,7 @@
 INCS = -I$(X11INC) \
        `pkg-config --cflags fontconfig` \
        `pkg-config --cflags freetype2`
-LIBS = -L$(X11LIB) -lm -lrt -lX11 -lutil -lXft \
+LIBS = -L${X11LIB} -lm -lrt -lX11 -lutil -lXft -lXext -lXrender\
        `pkg-config --libs fontconfig` \
        `pkg-config --libs freetype2`

--- a/st.h	2017-03-22 00:15:21.513468724 -0400
+++ b/st.h	2017-03-22 00:14:41.201467766 -0400
@@ -255,6 +255,7 @@
 extern unsigned int cursorthickness;
 extern unsigned int blinktimeout;
 extern char termname[];
+extern const int alpha;
 extern const char *colorname[];
 extern size_t colornamelen;
 extern unsigned int defaultfg;
--- a/x.c	2017-03-22 00:15:21.514468724 -0400
+++ b/x.c	2017-03-22 00:14:41.202467766 -0400
@@ -23,6 +23,9 @@
 #include "win.h"
 #include "st.h"

+/* Constants */
+#define OPAQUE 0Xff
+
 /* XEMBED messages */
 #define XEMBED_FOCUS_IN  4
 #define XEMBED_FOCUS_OUT 5
@@ -31,6 +34,7 @@
 #define TRUERED(x)		(((x) & 0xff0000) >> 8)
 #define TRUEGREEN(x)		(((x) & 0xff00))
 #define TRUEBLUE(x)		(((x) & 0xff) << 8)
+#define USE_ARGB (alpha != OPAQUE && opt_embed == NULL)

 typedef XftDraw *Draw;
 typedef XftColor Color;
@@ -51,6 +55,7 @@
 	int isfixed; /* is fixed geometry? */
 	int l, t; /* left and top offset */
 	int gm; /* geometry mask */
+    int depth; /*  bit depth */
 } XWindow;

 typedef struct {
@@ -561,7 +566,7 @@

 	XFreePixmap(xw.dpy, xw.buf);
 	xw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h,
-			DefaultDepth(xw.dpy, xw.scr));
+			xw.depth);
 	XftDrawChange(xw.draw, xw.buf);
 	xclear(0, 0, win.w, win.h);
 }
@@ -618,6 +623,13 @@
 			else
 				die("Could not allocate color %d\n", i);
 		}
+
+    /* set alpha value of bg color */
+	if (USE_ARGB) {
+		dc.col[defaultbg].color.alpha = (0xffff * alpha) / OPAQUE; //0xcccc;
+		dc.col[defaultbg].pixel &= 0x00111111;
+		dc.col[defaultbg].pixel |= alpha << 24; // 0xcc000000;
+	}
 	loaded = 1;
 }

@@ -878,7 +890,38 @@
 	if (!(xw.dpy = XOpenDisplay(NULL)))
 		die("Can't open display\n");
 	xw.scr = XDefaultScreen(xw.dpy);
-	xw.vis = XDefaultVisual(xw.dpy, xw.scr);
+    xw.depth = (USE_ARGB) ? 32: XDefaultDepth(xw.dpy, xw.scr);
+	if (! USE_ARGB)
+		xw.vis = XDefaultVisual(xw.dpy, xw.scr);
+	else {
+		XVisualInfo *vis;
+		XRenderPictFormat *fmt;
+		int nvi;
+		int i;
+
+		XVisualInfo tpl = {
+			.screen = xw.scr,
+			.depth = 32,
+			.class = TrueColor
+		};
+
+		vis = XGetVisualInfo(xw.dpy, VisualScreenMask | VisualDepthMask | VisualClassMask, &tpl, &nvi);
+		xw.vis = NULL;
+		for(i = 0; i < nvi; i ++) {
+			fmt = XRenderFindVisualFormat(xw.dpy, vis[i].visual);
+			if (fmt->type == PictTypeDirect && fmt->direct.alphaMask) {
+				xw.vis = vis[i].visual;
+				break;
+			}
+		}
+
+		XFree(vis);
+
+		if (! xw.vis) {
+			fprintf(stderr, "Couldn't find ARGB visual.\n");
+			exit(1);
+		}
+	}

 	/* font */
 	if (!FcInit())
@@ -888,7 +931,10 @@
 	xloadfonts(usedfont, 0);

 	/* colors */
-	xw.cmap = XDefaultColormap(xw.dpy, xw.scr);
+    if (! USE_ARGB)
+		xw.cmap = XDefaultColormap(xw.dpy, xw.scr);
+	else
+		xw.cmap = XCreateColormap(xw.dpy, XRootWindow(xw.dpy, xw.scr), xw.vis, None);
 	xloadcols();

 	/* adjust fixed window geometry */
@@ -911,16 +957,17 @@
 	if (!(opt_embed && (parent = strtol(opt_embed, NULL, 0))))
 		parent = XRootWindow(xw.dpy, xw.scr);
 	xw.win = XCreateWindow(xw.dpy, parent, xw.l, xw.t,
-			win.w, win.h, 0, XDefaultDepth(xw.dpy, xw.scr), InputOutput,
+			win.w, win.h, 0, xw.depth, InputOutput,
 			xw.vis, CWBackPixel | CWBorderPixel | CWBitGravity
 			| CWEventMask | CWColormap, &xw.attrs);

 	memset(&gcvalues, 0, sizeof(gcvalues));
 	gcvalues.graphics_exposures = False;
-	dc.gc = XCreateGC(xw.dpy, parent, GCGraphicsExposures,
+	xw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h, xw.depth);
+    dc.gc = XCreateGC(xw.dpy,
+			(USE_ARGB)? xw.buf: parent,
+			GCGraphicsExposures,
 			&gcvalues);
-	xw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h,
-			DefaultDepth(xw.dpy, xw.scr));
 	XSetForeground(xw.dpy, dc.gc, dc.col[defaultbg].pixel);
 	XFillRectangle(xw.dpy, xw.buf, dc.gc, 0, 0, win.w, win.h);

