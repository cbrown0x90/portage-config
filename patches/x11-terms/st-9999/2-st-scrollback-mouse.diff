diff -Naur backup/tmp/config.def.h work/config.def.h
--- backup/tmp/config.def.h	2017-03-21 23:42:40.374422115 -0400
+++ work/config.def.h	2017-03-21 23:42:19.733421624 -0400
@@ -156,8 +156,14 @@
  */
 MouseShortcut mshortcuts[] = {
 	/* button               mask            string */
-	{ Button4,              XK_ANY_MOD,     "\031" },
-	{ Button5,              XK_ANY_MOD,     "\005" },
+	{ Button4,              XK_NO_MOD,      "\031" },
+	{ Button5,              XK_NO_MOD,      "\005" },
+};
+
+MouseKey mkeys[] = {
+	/* button               mask            function        argument */
+	{ Button4,              ShiftMask,      kscrollup,      {.i =  1} },
+	{ Button5,              ShiftMask,      kscrolldown,    {.i =  1} },
 };
 
 /* Internal keyboard shortcuts. */
diff -Naur backup/tmp/st.c work/st.c
--- backup/tmp/st.c	2017-03-21 23:42:40.374422115 -0400
+++ work/st.c	2017-03-21 23:42:19.733421624 -0400
@@ -237,6 +237,7 @@
 /* config.h array lengths */
 size_t colornamelen = LEN(colorname);
 size_t mshortcutslen = LEN(mshortcuts);
+size_t mkeyslen = LEN(mkeys);
 size_t shortcutslen = LEN(shortcuts);
 size_t selmaskslen = LEN(selmasks);
 
diff -Naur backup/tmp/st.h work/st.h
--- backup/tmp/st.h	2017-03-21 23:42:40.374422115 -0400
+++ work/st.h	2017-03-21 23:42:19.733421624 -0400
@@ -181,6 +181,13 @@
 } Arg;
 
 typedef struct {
+	uint b;
+	uint mask;
+	void (*func)(const Arg *);
+	const Arg arg;
+} MouseKey;
+
+typedef struct {
 	uint mod;
 	KeySym keysym;
 	void (*func)(const Arg *);
@@ -268,6 +275,8 @@
 extern unsigned int mousefg;
 extern unsigned int mousebg;
 extern unsigned int defaultattr;
+extern MouseKey mkeys[];
+extern size_t mkeyslen;
 extern MouseShortcut mshortcuts[];
 extern size_t mshortcutslen;
 extern Shortcut shortcuts[];
diff -Naur backup/tmp/x.c work/x.c
--- backup/tmp/x.c	2017-03-21 23:42:40.374422115 -0400
+++ work/x.c	2017-03-21 23:42:19.734421624 -0400
@@ -248,12 +248,21 @@
 {
 	struct timespec now;
 	MouseShortcut *ms;
+    MouseKey *mk;
 
 	if (IS_SET(MODE_MOUSE) && !(e->xbutton.state & forceselmod)) {
 		mousereport(e);
 		return;
 	}
 
+    for (mk = mkeys; mk < mkeys + mkeyslen; mk++) {
+		if (e->xbutton.button == mk->b
+				&& match(mk->mask, e->xbutton.state)) {
+			mk->func(&mk->arg);
+			return;
+		}
+	}
+
 	for (ms = mshortcuts; ms < mshortcuts + mshortcutslen; ms++) {
 		if (e->xbutton.button == ms->b
 				&& match(ms->mask, e->xbutton.state)) {
