/* See LICENSE file for copyright and license details. */

/* appearance */
static const unsigned int borderpx  = 1;        /* border pixel of windows */
static const unsigned int snap      = 10;       /* snap pixel */
static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 0;        /* 0 means bottom bar */
static const char *fonts[]          = { "Gohu GohuFont", "Font Awesome 5 Free:size=9" };
static const char col_gray_dark[]   = "#222222";
static const char col_gray_light[]  = "#bbbbbb";
static const char *colors[][3]      = {
    /*               fg         bg         border   */
    [SchemeNorm] = { col_gray_light, col_gray_dark, col_gray_dark },
    [SchemeSel] =  { col_gray_dark, col_gray_light,  col_gray_light },
    { "#ff4040", col_gray_dark, col_gray_dark },
};

static char* const autostart[][16] = { /* please replace 2 with maximum number of arguments from autostart array */
    { "picom", "-b", NULL },
    { "xrdb", ".Xresources", NULL },
    { "/home/chris/.scripts/dwm/locker", NULL },
    { "pulseaudio", "-D", NULL },
    { "/home/chris/Documents/dwm-bar/bar", NULL },
};


/* tagging */
static const char *tags[] = { "1: Web", "2: Personal", "3: Work", "4: Misc", "5: Music", "6: Chat" };

static const Rule rules[] = {
    /* xprop(1):
     *    WM_CLASS(STRING) = instance, class
     *    WM_NAME(STRING) = title
     */
    /* class      instance    title       tags mask     isfloating   monitor */
    { "qTox",     NULL,       NULL,       1 << 5,       0,           -1 },
};

/* layout(s) */
static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */

static const Layout layouts[] = {
    /* symbol     arrange function */
    { "[]=",      tile },    /* first entry is default */
    { "><>",      NULL },    /* no layout function means floating behavior */
    { "[M]",      monocle },
    { "TTT",      bstack },
    { "===",      bstackhoriz },
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
    { MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
    { MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
    { MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
    { MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = { "j4-dmenu-desktop", "--no-generic", "--dmenu=dmenu -i -b -fn \"Gohu GohuFont\" -nb \"#222222\" -nf \"#bbbbbb\" -sb \"#bbbbbb\" -sf \"#222222\"", NULL };
static const char *termcmd[]  = { "st", "-e", "fish", NULL };
static const char *web[]  = { "firefox", NULL };
static const char *lock[] = { "slock", NULL };
static const char *screenshot[] = { "scrot", "-e", "mv $f Pictures/Screenshots", NULL };
static const char *toggleLock[] = { "/home/chris/.scripts/toggle-lock", NULL };
static const char *volup[] = { "pactl", "set-sink-volume", "@DEFAULT_SINK@", "+5%", NULL };
static const char *voldown[] = { "pactl", "set-sink-volume", "@DEFAULT_SINK@", "-5%", NULL };

#include "movestack.c"
static Key keys[] = {
        /* modifier                     key            function        argument */
        { MODKEY,                       XK_d,          spawn,          {.v = dmenucmd } },
        { MODKEY,                       XK_v,          spawn,          {.v = web } },
        { MODKEY,                       XK_Return,     spawn,          {.v = termcmd } },
        //{ MODKEY,                     XK_c,          spawn,          {.v = web } },
        { MODKEY,                       XK_b,          togglebar,      {0} },
        { 0,                            XK_Print,      spawn,          {.v = screenshot } },
        { 0,                            XK_F4,         spawn,          {.v = toggleLock } },
        { MODKEY|ShiftMask,             XK_l,          spawn,          {.v = lock } },
        { MODKEY,                       XK_Left,       focusstack,     {.i = -1 } },
        { MODKEY,                       XK_Right,      focusstack,     {.i = +1 } },
        { MODKEY|ShiftMask,             XK_Left,       movestack,      {.i = -1 } },
        { MODKEY|ShiftMask,             XK_Right,      movestack,      {.i = +1 } },
        { MODKEY,                       XK_i,          incnmaster,     {.i = +1 } },
        { MODKEY,                       XK_u,          incnmaster,     {.i = -1 } },
        { MODKEY,                       XK_k,          setmfact,       {.f = -0.05} },
        { MODKEY,                       XK_l,          setmfact,       {.f = +0.05} },
        { MODKEY,                       XK_Tab,        view,           {0} },
        { MODKEY|ShiftMask,             XK_q,          killclient,     {0} },
        { MODKEY,                       XK_t,          setlayout,      {.v = &layouts[0]} },
        { MODKEY,                       XK_f,          setlayout,      {.v = &layouts[1]} },
        { MODKEY,                       XK_s,          setlayout,      {.v = &layouts[2]} },
        { MODKEY,                       XK_p,          setlayout,      {.v = &layouts[3]} },
        //{ MODKEY,                       XK_y,        setlayout,      {.v = &layouts[4]} },
        { MODKEY,                       XK_space,      setlayout,      {0} },
        { MODKEY|ShiftMask,             XK_space,      togglefloating, {0} },
        { MODKEY,                       XK_0,          view,           {.ui = ~0 } },
        { MODKEY|ShiftMask,             XK_0,          tag,            {.ui = ~0 } },
        { MODKEY,                       XK_comma,      focusmon,       {.i = -1 } },
        { MODKEY,                       XK_period,     focusmon,       {.i = +1 } },
        { MODKEY|ShiftMask,             XK_comma,      tagmon,         {.i = -1 } },
        { MODKEY|ShiftMask,             XK_period,     tagmon,         {.i = +1 } },
        { 0,                            0x1008FF13,    spawn,          {.v = volup } },
        { 0,                            0x1008FF11,    spawn,          {.v = voldown } },
        TAGKEYS(                        XK_1,                          0)
        TAGKEYS(                        XK_2,                          1)
        TAGKEYS(                        XK_3,                          2)
        TAGKEYS(                        XK_4,                          3)
        TAGKEYS(                        XK_5,                          4)
        TAGKEYS(                        XK_6,                          5)
        TAGKEYS(                        XK_7,                          6)
        TAGKEYS(                        XK_8,                          7)
        TAGKEYS(                        XK_9,                          8)
        { MODKEY|ShiftMask,             XK_e,          quit,           {0} },
};

/* button definitions */
/* click can be ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
    /* click                event mask      button          function        argument */
    { ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
    { ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
    { ClkWinTitle,          0,              Button2,        zoom,           {0} },
    { ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
    { ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
    { ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
    { ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
    { ClkTagBar,            0,              Button1,        view,           {0} },
    { ClkTagBar,            0,              Button3,        toggleview,     {0} },
    { ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
    { ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

